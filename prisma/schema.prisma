// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Type definitions for the schema below
//

enum UserRole {
  USER
  ADMIN
}

enum ItemStatus {
  LOST
  FOUND
  RETURNED
}

enum NotificationType {
  EMAIL
  IN_APP
}

//
// Schema Definitions
//

model User {
  id             Int      @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String   @unique
  password       String
  profilePicture String?
  role           UserRole @default(USER)

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  reports          Report[]
  claims           Claim[]
  sentMessages     Message[]      @relation("UserSentMessages")
  receivedMessages Message[]      @relation("UserReceivedMessages")
  notifications    Notification[]
  admin            Admin?
  auditLogs        AuditLog[]
}

model Admin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  sentMessages     Message[]  @relation("AdminSentMessages")
  receivedMessages Message[]  @relation("AdminReceivedMessages")
  auditLogs        AuditLog[]
}

model Report {
  id          Int        @id @default(autoincrement())
  description String
  image       String?
  status      ItemStatus @default(LOST)
  userId      Int
  itemId      Int?

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  user User  @relation(fields: [userId], references: [id])
  item Item? @relation(fields: [itemId], references: [id])
}

model Claim {
  id          Int        @id @default(autoincrement())
  userId      Int
  itemId      Int
  description String?
  status      ItemStatus @default(LOST)

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id])
  item Item @relation(fields: [itemId], references: [id])
}

model Item {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  location    String
  status      ItemStatus @default(FOUND)
  image       String?
  category    String
  buildingId  Int?

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  reports  Report[]
  claims   Claim[]
  building Building? @relation(fields: [buildingId], references: [id])
}

model Message {
  id              Int      @id @default(autoincrement())
  content         String
  senderUserId    Int?
  receiverUserId  Int?
  senderAdminId   Int?
  receiverAdminId Int?
  sentAt          DateTime @default(now())

  // Relationships
  senderUser    User?  @relation("UserSentMessages", fields: [senderUserId], references: [id])
  receiverUser  User?  @relation("UserReceivedMessages", fields: [receiverUserId], references: [id])
  senderAdmin   Admin? @relation("AdminSentMessages", fields: [senderAdminId], references: [id])
  receiverAdmin Admin? @relation("AdminReceivedMessages", fields: [receiverAdminId], references: [id])
}

model Notification {
  id      Int              @id @default(autoincrement())
  message String
  type    NotificationType
  read    Boolean          @default(false)
  userId  Int

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id])
}

model Building {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  items Item[]
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String
  performedAt DateTime @default(now())
  userId      Int?
  adminId     Int?

  // Relationships
  user  User?  @relation(fields: [userId], references: [id])
  admin Admin? @relation(fields: [adminId], references: [id])
}
