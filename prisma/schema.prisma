// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Type definitions for the schema below
//

enum ItemStatus {
  FOUND
  LOST
  RETURNED
}

enum NotificationType {
  ITEM_FOUND
  NEW_REPORT
  GENERAL
}

//
// Schema Definitions
//

model User {
  id             Int     @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String  @unique
  password       String
  profilePicture String?

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  lostItems        LostItem[]
  foundRequests    FoundRequest[]
  notifications    Notification[]
  sentMessages     Message[]      @relation("UserSentMessages")
  receivedMessages Message[]      @relation("UserReceivedMessages")
  auditLogs        AuditLog[]
}

model Staff {
  id             Int     @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String  @unique
  password       String
  profilePicture String?

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  foundItems       FoundItem[]
  notifications    Notification[]
  sentMessages     Message[]      @relation("StaffSentMessages")
  receivedMessages Message[]      @relation("StaffReceivedMessages")
  auditLogs        AuditLog[]
}

model Building {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  foundItems FoundItem[]
}

model FoundItem {
  id          Int        @id @default(autoincrement())
  description String
  image       String
  status      ItemStatus @default(FOUND)
  location    String

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  staffId    Int
  buildingId Int

  staff    Staff    @relation(fields: [staffId], references: [id])
  building Building @relation(fields: [buildingId], references: [id])
  tags     Tag[]
}

model LostItem {
  id          Int        @id @default(autoincrement())
  description String
  status      ItemStatus @default(LOST)

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  userId Int

  user User  @relation(fields: [userId], references: [id])
  tags Tag[]
}

model FoundRequest {
  id          Int    @id @default(autoincrement())
  description String
  image       String
  location    String

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  userId Int

  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id      Int              @id @default(autoincrement())
  message String
  type    NotificationType
  read    Boolean          @default(false)

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  userId  Int?
  staffId Int?

  user  User?  @relation(fields: [userId], references: [id])
  staff Staff? @relation(fields: [staffId], references: [id])
}

model Message {
  id              Int    @id @default(autoincrement())
  content         String
  senderUserId    Int?
  receiverUserId  Int?
  senderStaffId   Int?
  receiverStaffId Int?

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  senderUser    User?  @relation("UserSentMessages", fields: [senderUserId], references: [id])
  receiverUser  User?  @relation("UserReceivedMessages", fields: [receiverUserId], references: [id])
  senderStaff   Staff? @relation("StaffSentMessages", fields: [senderStaffId], references: [id])
  receiverStaff Staff? @relation("StaffReceivedMessages", fields: [receiverStaffId], references: [id])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  foundItems FoundItem[]
  lostItems  LostItem[]
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String
  performedAt DateTime @default(now())
  userId      Int?
  staffId     Int?

  // Relationships
  user  User?  @relation(fields: [userId], references: [id])
  staff Staff? @relation(fields: [staffId], references: [id])
}
