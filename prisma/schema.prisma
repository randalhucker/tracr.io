// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Type definitions for the schema below
//

enum OrderStatus {
  ISSUED
  SHIPPED
  DELIVERED
  CANCELLED
  ERROR
}

enum AddressType {
  DELIVERY
  BILLING
  WAREHOUSE
  SUPPLIER
}

//
// Schema Definitions
//

model Customer {
  id             Int     @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String  @unique
  password       String
  profilePicture String?
  balance        Float   @default(0.0)
  cart           Json

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  creditCards CreditCard[]
  addresses   Address[]
  orders      Order[]
}

model Staff {
  id             Int     @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String  @unique
  password       String
  profilePicture String?
  salary         Float   @default(0.0)
  jobTitle       String

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  address Address[]
}

model Supplier {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  address  Address[]
  products Product[]
}

model Warehouse {
  id        Int      @id @default(autoincrement())
  capacity  Int
  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  stock   Stock[]
  address Address[]
}

model Address {
  id             Int         @id @default(autoincrement())
  addressLineOne String
  addressLineTwo String?
  city           String
  state          String
  zip            String
  country        String
  type           AddressType

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  Customer    Customer?    @relation(fields: [customerId], references: [id])
  customerId  Int?
  Staff       Staff?       @relation(fields: [staffId], references: [id])
  staffId     Int?
  Supplier    Supplier?    @relation(fields: [supplierId], references: [id])
  supplierId  Int?
  Warehouse   Warehouse?   @relation(fields: [warehouseId], references: [id])
  warehouseId Int?
  CreditCard  CreditCard[]
}

model CreditCard {
  id               Int    @id @default(autoincrement())
  cardNumber       String
  expiryDate       String
  cvv              String
  billingAddressId Int
  customerId       Int

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  billingAddress Address  @relation(fields: [billingAddressId], references: [id])
  customer       Customer @relation(fields: [customerId], references: [id])
}

model Stock {
  id          Int @id @default(autoincrement())
  productId   Int
  warehouseId Int
  quantity    Int

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
}

model Product {
  id          Int     @id @default(autoincrement())
  image       String?
  name        String
  price       Float
  category    String
  brand       String
  size        String
  description String

  supplierId Int

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  supplier Supplier @relation(fields: [supplierId], references: [id])
  stocks   Stock[]
}

model Order {
  id           String      @id @default(uuid())
  customerId   Int
  status       OrderStatus @default(ISSUED)
  items        Json
  cardUsed     Int
  deliveryPlan Json

  createdAt DateTime @default(now()) @updatedAt
  updatedAt DateTime @default(now())

  // Relationships
  customer Customer @relation(fields: [customerId], references: [id])
}
